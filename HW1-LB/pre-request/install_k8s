#!/bin/bash

if [ "$RUNTIME" == "" ]; then
    if [ -S /var/run/docker.sock ]; then
        RUNTIME="docker"

    elif [ -S /var/run/cri-dockerd.sock ]; then
        RUNTIME="cri-docker"

    elif [ -S /var/run/crio/crio.sock ]; then
        RUNTIME="crio"

    elif [ -S /var/run/containerd/containerd.sock ]; then
        RUNTIME="containerd"

    else # default
        echo "Container Runtime is not detected."
        echo
        echo "To install Containerd, run '../containers/install-containerd.sh'."
        echo "To install Docker, run '../containers/install-docker.sh'."
        echo
        echo "Note that Kubernetes v1.23.0 would be installed if Docker is installed."
        echo "Otherwise, the latest version of Kubernetes would be installed."
        exit
    fi
fi

# update repo
sudo apt-get update

# install curl
sudo apt-get install -y curl

# install apt-transport-https
sudo apt-get install -y apt-transport-https ca-certificates

# add the key for kubernetes repo
sudo curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg

# add sources.list.d
echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

# update repo
sudo apt-get update


sudo apt-get install -y kubeadm=1.23.0-00 kubelet=1.23.0-00 kubectl=1.23.0-00

# mount bpffs (for cilium)
echo "bpffs                                     /sys/fs/bpf     bpf     defaults          0       0" | sudo tee -a /etc/fstab

# enable ip forwarding
if [ $(cat /proc/sys/net/ipv4/ip_forward) == 0 ]; then
    sudo bash -c "echo '1' > /proc/sys/net/ipv4/ip_forward"
    sudo bash -c "echo 'net.ipv4.ip_forward=1' >> /etc/sysctl.conf"
fi

# enable br_netfilter
sudo modprobe br_netfilter
if [ $(cat /proc/sys/net/bridge/bridge-nf-call-iptables) == 0 ]; then
    sudo bash -c "echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables"
    sudo bash -c "echo 'net.bridge.bridge-nf-call-iptables=1' >> /etc/sysctl.conf"
fi

# disable rp_filter
if [ ! -f /etc/sysctl.d/99-override_cilium_rp_filter.conf ]; then
    sudo bash -c "echo 'net.ipv4.conf.all.rp_filter = 0' > /etc/sysctl.d/99-override_cilium_rp_filter.conf"
    sudo systemctl restart systemd-sysctl
fi

# check if k8s_init.log exists
if [ -f ~/k8s_init.log ]; then
    echo "Already tried to initialize kubeadm"
    exit
fi

# turn off swap
sudo swapoff -a
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

# enable br_netfilter
sudo modprobe br_netfilter
if [ $(cat /proc/sys/net/bridge/bridge-nf-call-iptables) == 0 ]; then
    sudo bash -c "echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables"
    sudo bash -c "echo 'net.bridge.bridge-nf-call-iptables=1' >> /etc/sysctl.conf"
fi

# initialize the master node
sudo kubeadm init --pod-network-cidr=10.244.0.0/16 | tee -a ~/k8s_init.log
if [ $? != 0 ]; then
    echo "Failed to initialize kubeadm"
    exit
fi

# make kubectl work for non-root user
if [ ! -f $HOME/.kube/config ]; then
    mkdir -p $HOME/.kube
    sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    sudo chown $USER:$USER $HOME/.kube/config
    export KUBECONFIG=$HOME/.kube/config
    echo "export KUBECONFIG=$HOME/.kube/config" | tee -a ~/.bashrc
fi

# disable master isolation (due to the lack of resources)
kubectl taint nodes --all node-role.kubernetes.io/master-

# install cilium
curl -LO https://github.com/cilium/cilium-cli/releases/latest/download/cilium-linux-amd64.tar.gz
sudo tar xzvfC cilium-linux-amd64.tar.gz /usr/local/bin
rm cilium-linux-amd64.tar.gz
/usr/local/bin/cilium install

# wait for a while
sleep 5

/usr/local/bin/cilium status